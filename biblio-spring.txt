- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\pom.xml:
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.2</version> <relativePath/> </parent>
	<groupId>br.ufsm.csi</groupId>
	<artifactId>aula-spring-mvc</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>aula-spring-mvc</name>
	<description>aula-spring-mvc</description>
    <properties>
        <java.version>17</java.version>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
    </properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>jakarta.servlet.jsp.jstl</groupId>
			<artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
			<version>3.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.web</groupId>
			<artifactId>jakarta.servlet.jsp.jstl</artifactId>
			<version>3.0.1</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
</project>

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\mvnw.cmd:
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"


- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\.idea\compiler.xml:
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <annotationProcessing>
      <profile name="Maven default annotation processors profile" enabled="true">
        <sourceOutputDir name="target/generated-sources/annotations" />
        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
        <outputRelativeToContentRoot value="true" />
        <module name="aula-spring-mvc" />
      </profile>
    </annotationProcessing>
  </component>
  <component name="JavacSettings">
    <option name="ADDITIONAL_OPTIONS_OVERRIDE">
      <module name="aula-spring-mvc" options="-parameters" />
    </option>
  </component>
</project>.
.
- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\.idea\encodings.xml:
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="Encoding">
    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
  </component>
</project>.

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\.idea\jarRepositories.xml:
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RemoteRepositoriesConfiguration">
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Central Repository" />
      <option name="url" value="https://repo.maven.apache.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Maven Central repository" />
      <option name="url" value="https://repo1.maven.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="jboss.community" />
      <option name="name" value="JBoss Community repository" />
      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
    </remote-repository>
  </component>
</project>echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\.idea\misc.xml:
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="MavenProjectsManager">
    <option name="originalFiles">
      <list>
        <option value="$PROJECT_DIR$/pom.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="temurin-21" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/out" />
  </component>
</project>echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\.idea\uiDesigner.xml:
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="Palette2">
    <group name="Swing">
      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
      </item>
      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
      </item>
      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
      </item>
      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
      </item>
      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
        <initial-values>
          <property name="text" value="Button" />
        </initial-values>
      </item>
      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
        <initial-values>
          <property name="text" value="RadioButton" />
        </initial-values>
      </item>
      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
        <initial-values>
          <property name="text" value="CheckBox" />
        </initial-values>
      </item>
      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
        <initial-values>
          <property name="text" value="Label" />
        </initial-values>
      </item>
      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
          <preferred-size width="150" height="-1" />
        </default-constraints>
      </item>
      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
          <preferred-size width="150" height="-1" />
        </default-constraints>
      </item>
      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
          <preferred-size width="150" height="-1" />
        </default-constraints>
      </item>
      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
      </item>
      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
          <preferred-size width="200" height="200" />
        </default-constraints>
      </item>
      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
          <preferred-size width="200" height="200" />
        </default-constraints>
      </item>
      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
      </item>
      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
      </item>
      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
      </item>
      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
      </item>
      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
          <preferred-size width="-1" height="20" />
        </default-constraints>
      </item>
      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
      </item>
      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
      </item>
    </group>
  </component>
</project>echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\.idea\vcs.xml:
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$" vcs="Git" />
  </component>
</project>echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\.idea\workspace.xml:
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="eb76bbcb-4dc1-4ed1-841d-d2b9e8717c9c" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/src/main/resources/static/css/style.css" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/webapp/WEB-INF/acessoNegado.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/webapp/WEB-INF/acessoNegado.jsp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/webapp/WEB-INF/autor/editar.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/webapp/WEB-INF/autor/editar.jsp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/webapp/WEB-INF/autor/listar.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/webapp/WEB-INF/autor/listar.jsp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/webapp/WEB-INF/emprestimo/editar.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/webapp/WEB-INF/emprestimo/editar.jsp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/webapp/WEB-INF/emprestimo/listar.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/webapp/WEB-INF/emprestimo/listar.jsp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/webapp/WEB-INF/home.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/webapp/WEB-INF/home.jsp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/webapp/WEB-INF/livro/editar.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/webapp/WEB-INF/livro/editar.jsp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/webapp/WEB-INF/livro/listar.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/webapp/WEB-INF/livro/listar.jsp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/webapp/WEB-INF/login.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/webapp/WEB-INF/login.jsp" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="KubernetesApiPersistence">{}</component>
  <component name="KubernetesApiProvider">{
  &quot;isMigrated&quot;: true
}</component>
  <component name="MavenImportPreferences">
    <option name="generalSettings">
      <MavenGeneralSettings>
        <option name="mavenHomeTypeForPersistence" value="WRAPPER" />
      </MavenGeneralSettings>
    </option>
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 2
}</component>
  <component name="ProjectId" id="2yxmQ8bBM2Fu5GE2EXrwnNzXADI" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RequestMappingsPanelOrder0&quot;: &quot;0&quot;,
    &quot;RequestMappingsPanelOrder1&quot;: &quot;1&quot;,
    &quot;RequestMappingsPanelWidth0&quot;: &quot;75&quot;,
    &quot;RequestMappingsPanelWidth1&quot;: &quot;75&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
    &quot;Spring Boot.AulaSpringMvcApplication.executor&quot;: &quot;Run&quot;,
    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/Users/Cliente/nicolegg13/biblio-spring&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\Cliente\Desktop\NICOLE\UFSM\spi ufsm\[03] POO WEB I\aula-spring-mvc\src\main\resources\webapp" />
      <recent name="C:\Users\Cliente\Desktop\NICOLE\UFSM\spi ufsm\[03] POO WEB I\aula-spring-mvc\src\main\WEB-INF\views" />
      <recent name="C:\Users\Cliente\Desktop\NICOLE\UFSM\spi ufsm\[03] POO WEB I\aula-spring-mvc\src\main" />
      <recent name="C:\Users\Cliente\Desktop\NICOLE\UFSM\spi ufsm\[03] POO WEB I\aula-spring-mvc\src\main\java\br\ufsm\csi\aulaspringmvc" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\Cliente\Desktop\NICOLE\UFSM\spi ufsm\[03] POO WEB I\aula-spring-mvc\src\main\webapp\WEB-INF" />
      <recent name="C:\Users\Cliente\Desktop\NICOLE\UFSM\spi ufsm\[03] POO WEB I\aula-spring-mvc\src\main\webapp" />
      <recent name="C:\Users\Cliente\Desktop\NICOLE\UFSM\spi ufsm\[03] POO WEB I\aula-spring-mvc\src\main" />
      <recent name="C:\Users\Cliente\Desktop\NICOLE\UFSM\spi ufsm\[03] POO WEB I\aula-spring-mvc\src\main\resources" />
    </key>
    <key name="ExtractSuperBase.RECENT_KEYS">
      <recent name="br.ufsm.csi.aulaspringmvc.controller" />
    </key>
  </component>
  <component name="RunManager">
    <configuration name="AulaSpringMvcApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <option name="FRAME_DEACTIVATION_UPDATE_POLICY" value="UpdateClassesAndResources" />
      <module name="aula-spring-mvc" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="br.ufsm.csi.aulaspringmvc.AulaSpringMvcApplication" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9823dce3aa75-fbdcb00ec9e3-intellij.indexing.shared.core-IU-251.26927.53" />
        <option value="bundled-js-predefined-d6986cc7102b-09060db00ec0-JavaScript-IU-251.26927.53" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="eb76bbcb-4dc1-4ed1-841d-d2b9e8717c9c" name="Changes" comment="" />
      <created>1750784582377</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1750784582377</updated>
      <workItem from="1750784583212" duration="11872000" />
      <workItem from="1750807932437" duration="630000" />
      <workItem from="1750808791241" duration="500000" />
      <workItem from="1750810702397" duration="2668000" />
      <workItem from="1751388442118" duration="1261000" />
      <workItem from="1751390037449" duration="3468000" />
      <workItem from="1751571211287" duration="647000" />
      <workItem from="1751909505578" duration="17132000" />
      <workItem from="1751998535758" duration="19688000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
</project>echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\AulaSpringMvcApplication.java:
package br.ufsm.csi.aulaspringmvc;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;

@SpringBootApplication
public class AulaSpringMvcApplication extends SpringBootServletInitializer {
	@Override
	protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {
		return builder.sources(AulaSpringMvcApplication.class);
	}

	public static void main(String[] args) {
		SpringApplication.run(AulaSpringMvcApplication.class, args);
	}

}
echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\config\AppConfig.java:
package br.ufsm.csi.aulaspringmvc.config;

import br.ufsm.csi.aulaspringmvc.security.AutorizadorInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class AppConfig implements WebMvcConfigurer {
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new AutorizadorInterceptor());
    }
}
echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\controller\AutorController.java:
package br.ufsm.csi.aulaspringmvc.controller;

import br.ufsm.csi.aulaspringmvc.dao.AutorDAO;
import br.ufsm.csi.aulaspringmvc.model.Autor;
import br.ufsm.csi.aulaspringmvc.service.AutorService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/autores")
public class AutorController {

    private final AutorService autorService;

    @Autowired
    public AutorController(AutorService autorService) {
        this.autorService = autorService;
    }

    @GetMapping
    public String getAutores(Model model) {
        model.addAttribute("autores", autorService.getAutores());
        return "autor/listar";
    }

    @GetMapping("/novo")
    public String showNovoAutorForm(Model model) {
        model.addAttribute("autor", new Autor());
        return "autor/editar";
    }

    @PostMapping("/salvar")
    public String salvarAutor(@ModelAttribute("autor") Autor autor, RedirectAttributes redirectAttributes) {
        String resultado = autorService.salvar(autor);
        redirectAttributes.addFlashAttribute("mensagem", resultado);
        return "redirect:/autores";
    }

    @GetMapping("/editar/{id}")
    public String showEditarAutorForm(@PathVariable int id, Model model) {
        Autor autor = autorService.getAutorById(id);
        model.addAttribute("autor", autor);
        return "autor/editar";
    }

    @PostMapping("/excluir/{id}")
    public String excluirAutor(@PathVariable int id, RedirectAttributes redirectAttributes) {
        String resultado = autorService.excluir(id);
        redirectAttributes.addFlashAttribute("mensagem", resultado);
        return "redirect:/autores";
    }
}echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\controller\EmprestimoController.java:
package br.ufsm.csi.aulaspringmvc.controller;
import br.ufsm.csi.aulaspringmvc.model.Emprestimo;
import br.ufsm.csi.aulaspringmvc.model.Usuario;
import br.ufsm.csi.aulaspringmvc.service.EmprestimoService;
import br.ufsm.csi.aulaspringmvc.service.LivroService;
import br.ufsm.csi.aulaspringmvc.service.UsuarioService;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

/**
 * lida com questoes http e coordena o fluxo
 * sem acesso direto ao DAO
 * */

@Controller
@RequestMapping("/emprestimos")
public class EmprestimoController {

    private final LivroService livroService;
    private final UsuarioService usuarioService;
    private final EmprestimoService emprestimoService; //guarda objeto do serviço
    @Autowired
    public EmprestimoController(EmprestimoService emprestimoService, UsuarioService usuarioService, LivroService livroService) { //recebe serviço como parametro
        this.emprestimoService = emprestimoService;
        this.usuarioService = usuarioService;
        this.livroService = livroService;
    }

    @GetMapping
    public String getEmprestimos(Model model, HttpSession session) {
        Usuario usuarioLogado = (Usuario) session.getAttribute("usuarioLogado");

        if (usuarioLogado == null) {
            return "redirect:/"; // se não estiver logado, volta para a página inicial
        }

        if ("ADMIN".equals(usuarioLogado.getTipo_us())) {
            model.addAttribute("emprestimos", emprestimoService.getEmprestimos());
        } else {
            // Se for usuário comum, busca apenas os empréstimos dele
            model.addAttribute("emprestimos", emprestimoService.getEmprestimosPorUsuario(usuarioLogado.getId_us()));
        }

        return "emprestimo/listar";
    }

    @GetMapping("/novo")
    public String showNovoEmprestimoForm(Model model) {
        model.addAttribute("emprestimo", new Emprestimo());
        model.addAttribute("livros", livroService.getLivrosDisponiveis());
        model.addAttribute("usuarios", usuarioService.getUsuariosAtivos());
        return "emprestimo/editar";
    }

    @PostMapping("/salvar")
    public String salvarEmprestimo(@ModelAttribute("emprestimo") Emprestimo emprestimo, RedirectAttributes ra) {
        //recebe dados do formulario (ModelAttribute)
        //chama o serviço no objeto emprestimoService de EmprestimoService
        //redireciona o usuário
        String resultado = emprestimoService.inserir(emprestimo);
        ra.addFlashAttribute("mensagem", resultado);
        return "redirect:/emprestimos";
    }

    @PostMapping("/devolver/{id}")
    public String devolverEmprestimo(@PathVariable int id, RedirectAttributes redirectAttributes) {
        String resultado = emprestimoService.devolver(id);
        redirectAttributes.addFlashAttribute("mensagem", resultado);
        return "redirect:/emprestimos";
    }
}echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\controller\LivroController.java:
package br.ufsm.csi.aulaspringmvc.controller;

import br.ufsm.csi.aulaspringmvc.dao.AutorDAO;
import br.ufsm.csi.aulaspringmvc.dao.LivroDAO;
import br.ufsm.csi.aulaspringmvc.model.Livro;
import br.ufsm.csi.aulaspringmvc.service.AutorService;
import br.ufsm.csi.aulaspringmvc.service.LivroService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/livros")
public class LivroController {

    private final AutorService autorService;
    private final LivroService livroService;

    @Autowired
    public LivroController(LivroService livroService, AutorService autorService) {
        this.livroService = livroService;
        this.autorService = autorService;
    }

    @GetMapping
    public String getLivros(Model model) {
        model.addAttribute("livros", livroService.getLivros());
        return "livro/listar";
    }

    @GetMapping("/novo")
    public String showNovoLivroForm(Model model) {
        model.addAttribute("livro", new Livro());
        model.addAttribute("autores", autorService.getAutores());
        return "livro/editar";
    }

    @PostMapping("/salvar")
    public String salvarLivro(@ModelAttribute("livro") Livro livro, RedirectAttributes redirectAttributes) {
        String resultado = livroService.salvar(livro);
        redirectAttributes.addFlashAttribute("mensagem", resultado);
        return "redirect:/livros";
    }

    @GetMapping("/editar/{id}")
    public String showEditarLivroForm(@PathVariable int id, Model model) {
        Livro livro = livroService.getLivroById(id);
        model.addAttribute("livro", livro);
        model.addAttribute("autores", autorService.getAutores());
        return "livro/editar";
    }

    @PostMapping("/excluir/{id}")
    public String excluirLivro(@PathVariable int id, RedirectAttributes redirectAttributes) {
        String resultado = livroService.excluir(id);
        redirectAttributes.addFlashAttribute("mensagem", resultado);
        return "redirect:/livros";
    }
}echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\controller\LoginController.java:
package br.ufsm.csi.aulaspringmvc.controller;
import br.ufsm.csi.aulaspringmvc.model.Usuario;
import br.ufsm.csi.aulaspringmvc.service.LoginService;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
public class LoginController {

    private final LoginService loginService;
    @Autowired
    public LoginController(LoginService loginService) {
        this.loginService = loginService;
    }

    @GetMapping("/")
    public String showLoginPage() {
        return "login";
    }

    @PostMapping("/login")
    public String handleLogin(@RequestParam String email, @RequestParam String senha, HttpSession session, RedirectAttributes redirectAttributes) {
        Usuario usuarioAut = loginService.autenticar(email, senha);
        if (usuarioAut != null) { //controller gerencia a sessao
            session.setAttribute("usuarioLogado", usuarioAut);
            session.setMaxInactiveInterval(3600); // 60 minutes
            if ("ADMIN".equals(usuarioAut.getTipo_us())) {
                return "redirect:/home";
            } else {
                return "redirect:/emprestimos";
            }
        } else {
            redirectAttributes.addFlashAttribute("erro", "Email ou senha incorretos");
            return "redirect:/";
        }
    }

    @GetMapping("/home")
    public String showHomePage(HttpSession session) {
        Usuario usuario = (Usuario) session.getAttribute("usuarioLogado");
        if (usuario != null && "ADMIN".equals(usuario.getTipo_us())) {
            return "home";
        }
        return "redirect:/";
    }

    @GetMapping("/logout")
    public String handleLogout(HttpSession session) {
        session.invalidate();
        return "redirect:/";
    }
}echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\dao\AutorDAO.java:
package br.ufsm.csi.aulaspringmvc.dao;
import br.ufsm.csi.aulaspringmvc.model.Autor;
import org.springframework.stereotype.Repository;

import java.sql.*;
import java.util.ArrayList;

@Repository //padrao para DAOs - classe gerenciada pelo Spring - metodos de instancia (sem static)
public class AutorDAO {

    public String inserir(Autor autor) {
        String sql = "INSERT INTO autor (nome_aut, nacionalidade_aut, data_nascimento_aut) VALUES (?, ?, ?)";
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres();
             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            stmt.setString(1, autor.getNome_aut());
            stmt.setString(2, autor.getNacionalidade_aut());
            stmt.setDate(3, Date.valueOf(autor.getData_nascimento_aut()));

            int affectedRows = stmt.executeUpdate();

            if (affectedRows == 0) {
                return "Falha ao criar autor. Nenhuma linha afetada.";
            }

            try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    autor.setId_aut(generatedKeys.getInt(1));
                }
            }

            return "Autor criado com sucesso!";
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
            return "Erro ao criar autor: " + e.getMessage();
        }
    }

    public String alterar(Autor autor) {
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres()) {
            conn.setAutoCommit(false);
            PreparedStatement stmt = conn.prepareStatement(
                    "UPDATE autor SET nome_aut = ?, nacionalidade_aut = ?, data_nascimento_aut = ? WHERE id_aut = ?"
            );
            stmt.setString(1, autor.getNome_aut());
            stmt.setString(2, autor.getNacionalidade_aut());
            stmt.setDate(3, Date.valueOf(autor.getData_nascimento_aut()));
            stmt.setInt(4, autor.getId_aut());
            int updateCount = stmt.executeUpdate();
            conn.commit();
            if (updateCount <= 0) {
                return "Nenhum autor alterado";
            }
            return "Autor alterado com sucesso";
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
            return "Erro ao alterar autor: " + e.getMessage();
        }
    }

    public String excluir(int id) {
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres()) {
            PreparedStatement stmt = conn.prepareStatement("DELETE FROM autor WHERE id_aut = ?");
            stmt.setInt(1, id);
            int updateCount = stmt.executeUpdate();
            if (updateCount <= 0) {
                return "Nenhum autor excluído";
            }
            return "Autor excluído com sucesso";
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
            return "Erro ao excluir autor: " + e.getMessage();
        }
    }

    public Autor getAutorById(int id) {
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres()) {
            PreparedStatement stmt = conn.prepareStatement("SELECT * FROM autor WHERE id_aut = ?");
            stmt.setInt(1, id);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                Autor a = new Autor();
                a.setId_aut(rs.getInt("id_aut"));
                a.setNome_aut(rs.getString("nome_aut"));
                a.setNacionalidade_aut(rs.getString("nacionalidade_aut"));
                a.setData_nascimento_aut(rs.getDate("data_nascimento_aut").toString());
                return a;
            }
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return null;
    }

    public ArrayList<Autor> getAutores() {
        ArrayList<Autor> autores = new ArrayList<>();
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM autor")) {
            while (rs.next()) {
                Autor a = new Autor();
                a.setId_aut(rs.getInt("id_aut"));
                a.setNome_aut(rs.getString("nome_aut"));
                a.setNacionalidade_aut(rs.getString("nacionalidade_aut"));
                a.setData_nascimento_aut(rs.getDate("data_nascimento_aut").toString());
                autores.add(a);
            }
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return autores;
    }
}echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\dao\ConectarBancoDados.java:
package br.ufsm.csi.aulaspringmvc.dao;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class ConectarBancoDados {
    public static Connection conectarBancoPostgres() throws ClassNotFoundException, SQLException {
        Class.forName("org.postgresql.Driver");
        String url = "jdbc:postgresql://localhost:5432/poow_trabalho";
        String user = "postgres";
        String senha = "1234";
        return DriverManager.getConnection(url, user, senha);
    }
}echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\dao\EmprestimoDAO.java:
package br.ufsm.csi.aulaspringmvc.dao;
import br.ufsm.csi.aulaspringmvc.model.Emprestimo;
import org.springframework.stereotype.Repository;

import java.sql.*;
import java.util.ArrayList;

/**
 * executa os comandos sql e altera no banco
 * recebe objeto Emprestimo pronto e validado
 * faz o insert/update/delete no banco de dados
 * salva o que recebe
 */

@Repository //padrao para DAOs
public class EmprestimoDAO {
    public String inserir(Emprestimo emprestimo) {
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres()) {
            conn.setAutoCommit(false);
            PreparedStatement stmtEmp = conn.prepareStatement(
                    "INSERT INTO emprestimo (id_livro_emp, id_usuario_emp, data_emprestimo_emp, data_devolucao_prevista_emp, status_emp) VALUES (?, ?, ?, ?, ?)"
            );
            stmtEmp.setInt(1, emprestimo.getId_livro_emp());
            stmtEmp.setInt(2, emprestimo.getId_usuario_emp());
            stmtEmp.setDate(3, emprestimo.getData_emprestimo_emp());
            stmtEmp.setDate(4, emprestimo.getData_devolucao_prevista_emp());
            stmtEmp.setString(5, emprestimo.getStatus_emp());
            stmtEmp.executeUpdate();
            PreparedStatement stmtLivro = conn.prepareStatement("UPDATE livro SET disponivel_liv = false WHERE id_liv = ?");
            stmtLivro.setInt(1, emprestimo.getId_livro_emp());
            stmtLivro.executeUpdate();

            conn.commit();
            return "Empréstimo registrado com sucesso";
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
            return "Erro ao registrar empréstimo";
        }
    }

    public ArrayList<Emprestimo> getEmprestimos() {
        ArrayList<Emprestimo> emprestimos = new ArrayList<>();
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres()) {
            String sql = "SELECT e.*, l.titulo_liv as titulo_livro, u.nome_us as nome_usuario " +
                    "FROM emprestimo e " +
                    "JOIN livro l ON e.id_livro_emp = l.id_liv " +
                    "JOIN usuario u ON e.id_usuario_emp = u.id_us";

            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                Emprestimo e = new Emprestimo();
                e.setId_emp(rs.getInt("id_emp"));
                e.setId_livro_emp(rs.getInt("id_livro_emp"));
                e.setId_usuario_emp(rs.getInt("id_usuario_emp"));
                e.setData_emprestimo_emp(rs.getDate("data_emprestimo_emp"));
                e.setData_devolucao_prevista_emp(rs.getDate("data_devolucao_prevista_emp"));
                e.setData_devolucao_efetiva_emp(rs.getDate("data_devolucao_efetiva_emp"));
                e.setStatus_emp(rs.getString("status_emp"));

                // Adiciona os dados relacionados
                e.setTitulo_livro(rs.getString("titulo_livro"));
                e.setNome_usuario(rs.getString("nome_usuario"));

                emprestimos.add(e);
            }
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return emprestimos;
    }

    public ArrayList<Emprestimo> getEmprestimosPorUsuario(int idUsuario) {
        ArrayList<Emprestimo> emprestimos = new ArrayList<>();
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres()) {
            String sql = "SELECT e.*, l.titulo_liv as titulo_livro, u.nome_us as nome_usuario " +
                    "FROM emprestimo e " +
                    "JOIN livro l ON e.id_livro_emp = l.id_liv " +
                    "JOIN usuario u ON e.id_usuario_emp = u.id_us " +
                    "WHERE e.id_usuario_emp = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setInt(1, idUsuario);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Emprestimo e = new Emprestimo();
                e.setId_emp(rs.getInt("id_emp"));
                e.setId_livro_emp(rs.getInt("id_livro_emp"));
                e.setId_usuario_emp(rs.getInt("id_usuario_emp"));
                e.setData_emprestimo_emp(rs.getDate("data_emprestimo_emp"));
                e.setData_devolucao_prevista_emp(rs.getDate("data_devolucao_prevista_emp"));
                e.setData_devolucao_efetiva_emp(rs.getDate("data_devolucao_efetiva_emp"));
                e.setStatus_emp(rs.getString("status_emp"));
                e.setTitulo_livro(rs.getString("titulo_livro"));
                e.setNome_usuario(rs.getString("nome_usuario"));
                emprestimos.add(e);
            }
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return emprestimos;
    }

    public String devolver(int idEmprestimo) {
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres()) {
            conn.setAutoCommit(false);
            PreparedStatement stmtEmp = conn.prepareStatement(
                    "UPDATE emprestimo SET status_emp = 'CONCLUIDO', data_devolucao_efetiva_emp = CURRENT_DATE WHERE id_emp = ?"
            );
            stmtEmp.setInt(1, idEmprestimo);
            stmtEmp.executeUpdate();

            PreparedStatement stmtGetLivro = conn.prepareStatement("SELECT id_livro_emp FROM emprestimo WHERE id_emp = ?");
            stmtGetLivro.setInt(1, idEmprestimo);
            ResultSet rs = stmtGetLivro.executeQuery();
            if (rs.next()) {
                int idLivro = rs.getInt("id_livro_emp");
                PreparedStatement stmtLivro = conn.prepareStatement("UPDATE livro SET disponivel_liv = true WHERE id_liv = ?");
                stmtLivro.setInt(1, idLivro);
                stmtLivro.executeUpdate();
            }
            conn.commit();
            return "Devolução registrada com sucesso";
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
            return "Erro ao registrar devolução";
        }
    }

    //verifica se um livro tem emprestimos ativos antes de excluir (inativar)
    public boolean temEmprestimosAtivos(int idLivro) {
        String sql = "SELECT count(*) FROM emprestimo WHERE id_livro_emp = ? AND status_emp = 'ATIVO'";
        try(Connection conn = ConectarBancoDados.conectarBancoPostgres();
            PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, idLivro);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return false;
    }
}echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\dao\LivroDAO.java:
package br.ufsm.csi.aulaspringmvc.dao;
import br.ufsm.csi.aulaspringmvc.model.Livro;
import org.springframework.stereotype.Repository;
import java.sql.*;
import java.util.ArrayList;

@Repository //padrao para DAOs
public class LivroDAO {

    public String inserir(Livro livro) {
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres()) {
            conn.setAutoCommit(false);
            PreparedStatement stmt = conn.prepareStatement(
                    "INSERT INTO livro (titulo_liv, isbn_liv, ano_publicacao_liv, id_autor_liv, disponivel_liv, ativo_liv) VALUES (?, ?, ?, ?, ?, ?)"
            );
            stmt.setString(1, livro.getTitulo_liv());
            stmt.setString(2, livro.getIsbn_liv());
            stmt.setInt(3, livro.getAno_publicacao_liv());
            stmt.setInt(4, livro.getId_autor_liv());
            stmt.setBoolean(5, livro.isDisponivel_liv());
            stmt.setBoolean(6, livro.isAtivo_liv());
            stmt.executeUpdate();
            conn.commit();
            return "Livro inserido com sucesso";
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
            return "Erro ao inserir livro";
        }
    }

    public ArrayList<Livro> getLivros() {
        ArrayList<Livro> livros = new ArrayList<>();
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres()) {
            String sql = "SELECT l.*, a.nome_aut as nome_autor " +
                    "FROM livro l JOIN autor a ON l.id_autor_liv = a.id_aut WHERE l.ativo_liv = true";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            while (rs.next()) {
                Livro l = new Livro();
                l.setId_liv(rs.getInt("id_liv"));
                l.setTitulo_liv(rs.getString("titulo_liv"));
                l.setIsbn_liv(rs.getString("isbn_liv"));
                l.setAno_publicacao_liv(rs.getInt("ano_publicacao_liv"));
                l.setId_autor_liv(rs.getInt("id_autor_liv"));
                l.setDisponivel_liv(rs.getBoolean("disponivel_liv"));
                l.setAtivo_liv(rs.getBoolean("ativo_liv"));

                // Adiciona o nome do autor
                l.setNome_autor(rs.getString("nome_autor"));
                livros.add(l);
            }
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return livros;
    }

    public ArrayList<Livro> getLivrosDisponiveis() {
        ArrayList<Livro> livros = new ArrayList<>();
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(
                     "SELECT l.*, a.nome_aut FROM livro l JOIN autor a ON l.id_autor_liv = a.id_aut WHERE l.disponivel_liv = true AND l.ativo_liv = true"
             )) {
            while (rs.next()) {
                Livro l = new Livro();
                l.setId_liv(rs.getInt("id_liv"));
                l.setTitulo_liv(rs.getString("titulo_liv"));
                l.setIsbn_liv(rs.getString("isbn_liv"));
                l.setAno_publicacao_liv(rs.getInt("ano_publicacao_liv"));
                l.setId_autor_liv(rs.getInt("id_autor_liv"));
                l.setDisponivel_liv(rs.getBoolean("disponivel_liv"));
                l.setAtivo_liv(rs.getBoolean("ativo_liv"));
                l.setNome_autor(rs.getString("nome_aut"));
                livros.add(l);
            }
        } catch (SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        return livros;
    }

    public Livro getLivroById(int id) {
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres()) {
            PreparedStatement stmt = conn.prepareStatement(
                    "SELECT l.*, a.nome_aut FROM livro l JOIN autor a ON l.id_autor_liv = a.id_aut WHERE l.id_liv = ?"
            );
            stmt.setInt(1, id);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                Livro l = new Livro();
                l.setId_liv(rs.getInt("id_liv"));
                l.setTitulo_liv(rs.getString("titulo_liv"));
                l.setIsbn_liv(rs.getString("isbn_liv"));
                l.setAno_publicacao_liv(rs.getInt("ano_publicacao_liv"));
                l.setId_autor_liv(rs.getInt("id_autor_liv"));
                l.setDisponivel_liv(rs.getBoolean("disponivel_liv"));
                l.setAtivo_liv(rs.getBoolean("ativo_liv"));
                l.setNome_autor(rs.getString("nome_aut"));
                return l;
            }
        } catch (SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        return null;
    }

    public String alterar(Livro livro) {
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres()) {
            PreparedStatement stmt = conn.prepareStatement(
                    "UPDATE livro SET titulo_liv = ?, isbn_liv = ?, ano_publicacao_liv = ?, id_autor_liv = ?, disponivel_liv = ?, ativo_liv = ? WHERE id_liv = ?"
            );
            stmt.setString(1, livro.getTitulo_liv());
            stmt.setString(2, livro.getIsbn_liv());
            stmt.setInt(3, livro.getAno_publicacao_liv());
            stmt.setInt(4, livro.getId_autor_liv());
            stmt.setBoolean(5, livro.isDisponivel_liv());
            stmt.setBoolean(6, livro.isAtivo_liv());
            stmt.setInt(7, livro.getId_liv());
            int updateCount = stmt.executeUpdate();
            if (updateCount <= 0) {
                return "Nenhum livro atualizado";
            }
            return "Livro atualizado com sucesso";
        } catch (SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            return "Erro ao atualizar livro";
        }
    }

    //"excluir" mas mantem no historico de registros
    public String inativar(int id) {
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres()) {
            PreparedStatement stmt = conn.prepareStatement("UPDATE livro SET ativo_liv = false WHERE id_liv = ?");

            stmt.setInt(1, id);

            int updateCount = stmt.executeUpdate();
            if (updateCount <= 0) {
                return "Nenhum livro encontrado";
            }
            return "Livro removido do acervo com sucesso";
        } catch (SQLException ex) {
            if ("23503".equals(ex.getSQLState())) {
                return "Erro ao excluir: O livro está associado a um ou mais empréstimos.";
            }
            ex.printStackTrace();
            return "Erro ao remover livro: " + ex.getMessage();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            return "Erro ao remover livro: " + e.getMessage();
        }
    }
}echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\dao\UsuarioDAO.java:
package br.ufsm.csi.aulaspringmvc.dao;
import br.ufsm.csi.aulaspringmvc.model.Usuario;
import org.springframework.stereotype.Repository;

import java.sql.*;
import java.util.ArrayList;

@Repository //padrao para DAOs
public class UsuarioDAO {
    public Usuario autenticar(String email, String senha) {
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres()) {
            PreparedStatement stmt = conn.prepareStatement(
                    "SELECT * FROM usuario WHERE email_us = ? AND senha_us = ? AND ativo_us = true"
            );
            stmt.setString(1, email);
            stmt.setString(2, senha);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                Usuario u = new Usuario();
                u.setId_us(rs.getInt("id_us"));
                u.setEmail_us(rs.getString("email_us"));
                u.setSenha_us(rs.getString("senha_us"));
                u.setNome_us(rs.getString("nome_us"));
                u.setTipo_us(rs.getString("tipo_us"));
                return u;
            }
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return null;
    }

    public ArrayList<Usuario> getUsuariosAtivos() {
        ArrayList<Usuario> usuarios = new ArrayList<>();
        try (Connection conn = ConectarBancoDados.conectarBancoPostgres();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(
                     "SELECT * FROM usuario WHERE ativo_us = true AND tipo_us = 'USUARIO'"
             )) {
            while (rs.next()) {
                Usuario u = new Usuario();
                u.setId_us(rs.getInt("id_us"));
                u.setEmail_us(rs.getString("email_us"));
                u.setNome_us(rs.getString("nome_us"));
                usuarios.add(u);
            }
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return usuarios;
    }
}echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\model\Autor.java:
package br.ufsm.csi.aulaspringmvc.model;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class Autor {
    private int id_aut;
    private String nome_aut;
    private String nacionalidade_aut;
    private String data_nascimento_aut;

    // Getters e Setters
    public int getId_aut() { return id_aut; }
    public void setId_aut(int id_aut) { this.id_aut = id_aut; }

    public String getNome_aut() { return nome_aut; }
    public void setNome_aut(String nome_aut) {
        if (nome_aut == null || nome_aut.trim().isEmpty()) {
            throw new IllegalArgumentException("Nome do autor é obrigatório");
        }
        this.nome_aut = nome_aut;
    }

    public String getNacionalidade_aut() { return nacionalidade_aut; }
    public void setNacionalidade_aut(String nacionalidade_aut) {
        this.nacionalidade_aut = nacionalidade_aut;
    }

    public String getData_nascimento_aut() { return data_nascimento_aut; }
    public void setData_nascimento_aut(String data_nascimento_aut) {
        if (data_nascimento_aut == null || data_nascimento_aut.trim().isEmpty()) {
            throw new IllegalArgumentException("Data de nascimento é obrigatória");
        }

        // Converte para o formato AAAA-MM-dd para o input type="date"
        try {
            LocalDate date = LocalDate.parse(data_nascimento_aut);
            this.data_nascimento_aut = date.format(DateTimeFormatter.ISO_LOCAL_DATE);
        } catch (Exception e) {
            throw new IllegalArgumentException("Formato de data inválido. Use o formato AAAA-MM-DD");
        }
    }
}echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\model\Emprestimo.java:
package br.ufsm.csi.aulaspringmvc.model;
import java.sql.Date;
public class Emprestimo {
    private int id_emp;
    private int id_livro_emp;
    private int id_usuario_emp;
    private Date data_emprestimo_emp;
    private Date data_devolucao_prevista_emp;
    private Date data_devolucao_efetiva_emp;
    private String status_emp;
    //extras - para exibir
    private String titulo_livro;
    private String nome_usuario;

    // Getters e Setters
    public int getId_emp() { return id_emp; }
    public void setId_emp(int id_emp) { this.id_emp = id_emp; }
    public int getId_livro_emp() { return id_livro_emp; }
    public void setId_livro_emp(int id_livro_emp) { this.id_livro_emp = id_livro_emp; }
    public int getId_usuario_emp() { return id_usuario_emp; }
    public void setId_usuario_emp(int id_usuario_emp) { this.id_usuario_emp = id_usuario_emp; }
    public Date getData_emprestimo_emp() { return data_emprestimo_emp; }
    public void setData_emprestimo_emp(Date data_emprestimo_emp) { this.data_emprestimo_emp = data_emprestimo_emp; }
    public Date getData_devolucao_prevista_emp() { return data_devolucao_prevista_emp; }
    public void setData_devolucao_prevista_emp(Date data_devolucao_prevista_emp) { this.data_devolucao_prevista_emp = data_devolucao_prevista_emp; }
    public Date getData_devolucao_efetiva_emp() { return data_devolucao_efetiva_emp; }
    public void setData_devolucao_efetiva_emp(Date data_devolucao_efetiva_emp) { this.data_devolucao_efetiva_emp = data_devolucao_efetiva_emp; }
    public String getStatus_emp() { return status_emp; }
    public void setStatus_emp(String status_emp) { this.status_emp = status_emp; }

    public String getTitulo_livro() { return titulo_livro; }
    public void setTitulo_livro(String titulo_livro) { this.titulo_livro = titulo_livro; }

    public String getNome_usuario() { return nome_usuario; }
    public void setNome_usuario(String nome_usuario) { this.nome_usuario = nome_usuario; }
}echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\model\Livro.java:
package br.ufsm.csi.aulaspringmvc.model;

public class Livro {
    private int id_liv;
    private String titulo_liv;
    private String isbn_liv;
    private int ano_publicacao_liv;
    private int id_autor_liv;
    private boolean disponivel_liv;
    private boolean ativo_liv;
    //extras - para exibir
    private String nome_autor;
    // Getters e Setters
    public int getId_liv() { return id_liv; }
    public void setId_liv(int id_liv) { this.id_liv = id_liv; }
    public String getTitulo_liv() { return titulo_liv; }
    public void setTitulo_liv(String titulo_liv) { this.titulo_liv = titulo_liv; }
    public String getIsbn_liv() { return isbn_liv; }
    public void setIsbn_liv(String isbn_liv) { this.isbn_liv = isbn_liv; }
    public int getAno_publicacao_liv() { return ano_publicacao_liv; }
    public void setAno_publicacao_liv(int ano_publicacao_liv) { this.ano_publicacao_liv = ano_publicacao_liv; }
    public int getId_autor_liv() { return id_autor_liv; }
    public void setId_autor_liv(int id_autor_liv) { this.id_autor_liv = id_autor_liv; }
    public boolean isDisponivel_liv() { return disponivel_liv; }
    public void setDisponivel_liv(boolean disponivel_liv) { this.disponivel_liv = disponivel_liv; }
    public boolean isAtivo_liv() { return ativo_liv; }
    public void setAtivo_liv(boolean ativo_liv) { this.ativo_liv = ativo_liv; }

    public String getNome_autor() { return nome_autor; }
    public void setNome_autor(String nome_autor) { this.nome_autor = nome_autor; }
}echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\model\Usuario.java:
package br.ufsm.csi.aulaspringmvc.model;

public class Usuario {
    private int id_us;
    private String email_us;
    private String senha_us;
    private String nome_us;
    private boolean ativo_us;
    private String tipo_us;
    // Getters e Setters
    public int getId_us() { return id_us; }
    public void setId_us(int id_us) { this.id_us = id_us; }
    public String getEmail_us() { return email_us; }
    public void setEmail_us(String email_us) { this.email_us = email_us; }
    public String getSenha_us() { return senha_us; }
    public void setSenha_us(String senha_us) { this.senha_us = senha_us; }
    public String getNome_us() { return nome_us; }
    public void setNome_us(String nome_us) { this.nome_us = nome_us; }
    public boolean isAtivo_us() { return ativo_us; }
    public void setAtivo_us(boolean ativo_us) { this.ativo_us = ativo_us; }
    public String getTipo_us() { return tipo_us; }
    public void setTipo_us(String tipo_us) { this.tipo_us = tipo_us; }
}echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\security\AutorizadorInterceptor.java:
package br.ufsm.csi.aulaspringmvc.security;
import br.ufsm.csi.aulaspringmvc.model.Usuario;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.web.servlet.HandlerInterceptor;

public class AutorizadorInterceptor implements HandlerInterceptor {
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        String uri = request.getRequestURI();

        //libera acesso a pagina de login e recursos estaticos (css etc)
        if (uri.equals("/") || uri.endsWith("/login") || uri.startsWith("/css/") || uri.startsWith("/js/") || uri.startsWith("/assets/")) {
            return true;
        }

        Object usuarioLogadoObj = request.getSession().getAttribute("usuarioLogado");

        if (usuarioLogadoObj == null) {
            response.sendRedirect(request.getContextPath() + "/");
            return false; //bloqueia
        }

        Usuario usuario = (Usuario) usuarioLogadoObj;
        if(uri.startsWith("/autores") || uri.startsWith("/livros")){ //so admin pode acessar
            if ("ADMIN".equals(usuario.getTipo_us())) {
                return true; //se for admin pode acessar
            } else {
                request.getRequestDispatcher("/WEB-INF/acessoNegado.jsp").forward(request, response);
                return false; //se for usuario nao pode acessar
            }
        }

        //outras paginas acesso permitido para usuarios logados
        return true;
    }
}
echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\service\AutorService.java:
package br.ufsm.csi.aulaspringmvc.service;

import br.ufsm.csi.aulaspringmvc.dao.AutorDAO;
import br.ufsm.csi.aulaspringmvc.model.Autor;
import org.springframework.stereotype.Service;

import java.util.ArrayList;

@Service
public class AutorService {
    private final AutorDAO autorDAO;

    //construtor
    public AutorService(AutorDAO autorDAO) {
        this.autorDAO = autorDAO;
    }

    public String salvar(Autor autor) {
        if (autor.getId_aut() == 0) {
            return autorDAO.inserir(autor);
        } else {
            return autorDAO.alterar(autor);
        }
    }

    public String excluir(int id) {
        return autorDAO.excluir(id);
    }

    public Autor getAutorById(int id) {
        return autorDAO.getAutorById(id);
    }

    public ArrayList<Autor> getAutores() {
        return autorDAO.getAutores();
    }
}
echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\service\EmprestimoService.java:
package br.ufsm.csi.aulaspringmvc.service;
import br.ufsm.csi.aulaspringmvc.dao.EmprestimoDAO;
import br.ufsm.csi.aulaspringmvc.dao.LivroDAO;
import br.ufsm.csi.aulaspringmvc.model.Emprestimo;
import br.ufsm.csi.aulaspringmvc.model.Livro;
import org.springframework.stereotype.Service;

import java.util.ArrayList;

/**
 * contem as regras de negocio, implementa e faz o registro do emprestimo em si
 * verificar se o livro está disponivel
 * define data atual como inicio do emprestimo
 * calcula data final (+14d)
 * define status como ativo
 */

@Service
public class EmprestimoService {
    private final EmprestimoDAO emprestimoDAO;
    private final LivroDAO livroDAO;

    //construtor
    public EmprestimoService(EmprestimoDAO emprestimoDAO, LivroDAO livroDAO) {
        this.emprestimoDAO = emprestimoDAO;
        this.livroDAO = livroDAO;
    }

    public ArrayList<Emprestimo> getEmprestimos() {
        return emprestimoDAO.getEmprestimos();
    }

    public ArrayList<Emprestimo> getEmprestimosPorUsuario(int idUsuario) {
        return emprestimoDAO.getEmprestimosPorUsuario(idUsuario);
    }

    public String devolver(int idEmprestimo) {
        return emprestimoDAO.devolver(idEmprestimo);
    }

    public String inserir(Emprestimo emprestimo) {
        Livro livro = livroDAO.getLivroById(emprestimo.getId_livro_emp());
        if(livro == null || !livro.isDisponivel_liv()) {
            return "livro não disponível ou não encontrado";
        }
        emprestimo.setData_emprestimo_emp(new java.sql.Date(System.currentTimeMillis()));
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.add(java.util.Calendar.DATE, 14); // add 14 dias para a devolução
        emprestimo.setData_devolucao_prevista_emp(new java.sql.Date(cal.getTimeInMillis()));
        emprestimo.setStatus_emp("ATIVO");
        //chama DAO
        return emprestimoDAO.inserir(emprestimo);
    }
}
echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\service\LivroService.java:
package br.ufsm.csi.aulaspringmvc.service;

import br.ufsm.csi.aulaspringmvc.dao.EmprestimoDAO;
import br.ufsm.csi.aulaspringmvc.dao.LivroDAO;
import br.ufsm.csi.aulaspringmvc.model.Livro;
import org.springframework.stereotype.Service;

import java.util.ArrayList;

@Service
public class LivroService {
    private final LivroDAO livroDAO;
    private final EmprestimoDAO emprestimoDAO;

    //construtor
    public LivroService(LivroDAO livroDAO, EmprestimoDAO emprestimoDAO) {
        this.livroDAO = livroDAO;
        this.emprestimoDAO = emprestimoDAO;
    }

    /*public String salvar(Livro livro) {
        if (livro.getId_liv() == 0) {
            //regra de negocio
            livro.setDisponivel_liv(true);
            return livroDAO.inserir(livro);
        } else {
            return livroDAO.alterar(livro);
        }
    }*/
    public String salvar(Livro livro){
        if (livro.getId_liv() == 0) {
            //insere novo
            //regras de negocio
            livro.setDisponivel_liv(true);
            livro.setAtivo_liv(true);
            return livroDAO.inserir(livro);
        } else {
            //alterar
            //busca no banco
            Livro livroBanco = livroDAO.getLivroById(livro.getId_liv());
            //atualiza os dados
            livroBanco.setTitulo_liv(livro.getTitulo_liv());
            livroBanco.setIsbn_liv(livro.getIsbn_liv());
            livroBanco.setAno_publicacao_liv(livro.getAno_publicacao_liv());
            livroBanco.setDisponivel_liv(livro.isDisponivel_liv());
            livroBanco.setId_autor_liv(livro.getId_autor_liv());

            return livroDAO.alterar(livroBanco);
        }
    }

    public String excluir(int id) {
        //verfifica se o livro tem emprestimos ativos
        if(emprestimoDAO.temEmprestimosAtivos(id)) {
            return "O livro não pode ser excluído pois tem empréstimos ativos";
        }
        return livroDAO.inativar(id);
    }

    public Livro getLivroById(int id) {
        return livroDAO.getLivroById(id);
    }

    public ArrayList<Livro> getLivros() {
        return livroDAO.getLivros();
    }

    public ArrayList<Livro> getLivrosDisponiveis() {
        return livroDAO.getLivrosDisponiveis();
    }
}
echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\service\LoginService.java:
package br.ufsm.csi.aulaspringmvc.service;

import br.ufsm.csi.aulaspringmvc.dao.UsuarioDAO;
import br.ufsm.csi.aulaspringmvc.model.Usuario;
import org.springframework.stereotype.Service;

@Service
public class LoginService {
    private final UsuarioDAO usuarioDAO;
    public LoginService(UsuarioDAO usuarioDAO) {
        this.usuarioDAO = usuarioDAO;
    }

    public Usuario autenticar(String email, String senha) {
        //Usuario usuario = usuarioDAO.autenticar(email, senha);
        Usuario usuario = usuarioDAO.autenticar(email, senha);
        return usuario; //ou null
    }
}echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\java\br\ufsm\csi\aulaspringmvc\service\UsuarioService.java:
package br.ufsm.csi.aulaspringmvc.service;
import br.ufsm.csi.aulaspringmvc.dao.UsuarioDAO;
import br.ufsm.csi.aulaspringmvc.model.Usuario;
import org.springframework.stereotype.Service;

import java.util.ArrayList;

@Service
public class UsuarioService {
    private final UsuarioDAO usuarioDAO;
    public UsuarioService(UsuarioDAO usuarioDAO) {
        this.usuarioDAO = usuarioDAO;
    }

    public Usuario autenticar(String email, String senha) {
        return usuarioDAO.autenticar(email, senha);
    }

    public ArrayList<Usuario> getUsuariosAtivos() {
        return usuarioDAO.getUsuariosAtivos();
    }
}
echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\webapp\WEB-INF\acessoNegado.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<head>
    <title>Acesso Negado</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/style.css">
</head>
<body>
<div class="container">
    <h1>Acesso Negado!</h1>
    <p>${mensagemAcessoNegado}</p>
    <p>Você não tem permissão para acessar esta página.</p>
<%--    <p><a href="${pageContext.request.contextPath}/home">Voltar para Home</a></p>--%>
    <p><a href="javascript:history.back()">voltar para a página anterior</a></p>
</div>
</body>
</html>echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\webapp\WEB-INF\home.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<head>
    <title>Home - Sistema Biblioteca</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/style.css">
</head>
<body>

<h1>Bem-vindo, ${sessionScope.usuarioLogado.nome_us}!</h1>
<p>Você está logado como: ${sessionScope.usuarioLogado.tipo_us}</p>

<nav>
    <ul>
        <c:if test="${sessionScope.usuarioLogado.tipo_us eq 'ADMIN'}">
            <li><a href="${pageContext.request.contextPath}/autores">Gerenciar Autores</a></li>
            <li><a href="${pageContext.request.contextPath}/livros">Gerenciar Livros</a></li>
            <li><a href="${pageContext.request.contextPath}/emprestimos">Gerenciar Empréstimos</a></li>
        </c:if>
        <c:if test="${sessionScope.usuarioLogado.tipo_us eq 'USUARIO'}">
            <li><a href="${pageContext.request.contextPath}/emprestimos">Meus Empréstimos</a></li>
        </c:if>
        <li><a href="${pageContext.request.contextPath}/logout">Sair</a></li>
    </ul>
</nav>
</body>
</html>echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\webapp\WEB-INF\login.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<head>
    <title>Login - Sistema Biblioteca</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/style.css">
</head>
<body>
<div class="login-container">
    <h2>Login</h2>
    <c:if test="${not empty erro}">
        <p class="error">${erro}</p>
    </c:if>
    <form action="${pageContext.request.contextPath}/login" method="post">
        <div>
            <label>Email:</label>
            <input type="email" name="email" required>
        </div>
        <div>
            <label>Senha:</label>
            <input type="password" name="senha" required>
        </div>
        <button type="submit">Entrar</button>
    </form>
</div>
</body>
</html>echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\webapp\WEB-INF\autor\editar.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<head>
    <title>${empty autor.id_aut ? 'Novo Autor' : 'Editar Autor'}</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/style.css">
</head>
<body>
<h1>${empty autor.id_aut ? 'Novo Autor' : 'Editar Autor'}</h1>

<c:if test="${not empty mensagem}">
    <p style="color: red;">${mensagem}</p>
</c:if>

<form action="${pageContext.request.contextPath}/autores/salvar" method="post">
    <input type="hidden" name="id_aut" value="${autor.id_aut}">

    <div class="form-group">
        <label for="nome">Nome:</label>
        <input type="text" id="nome" name="nome_aut" value="${autor.nome_aut}" required>
    </div>

    <div class="form-group">
        <label for="nacionalidade">Nacionalidade:</label>
        <input type="text" id="nacionalidade" name="nacionalidade_aut" value="${autor.nacionalidade_aut}">
    </div>

    <div class="form-group">
        <label for="data_nascimento">Data Nascimento:</label>
        <input type="date" id="data_nascimento" name="data_nascimento_aut"
               value="${autor.data_nascimento_aut}" required>
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-save">Salvar</button>
        <a href="${pageContext.request.contextPath}/autores" class="btn btn-cancel">Cancelar</a>
    </div>
</form>
</body>
</html>echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\webapp\WEB-INF\autor\listar.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<head>
    <title>Autores</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/style.css">
</head>
<body>
<h1>Autores</h1>

<a href="${pageContext.request.contextPath}/autores/novo" class="btn btn-novo">Novo Autor</a>

<table>
    <thead>
    <tr>
        <th>ID</th>
        <th>Nome</th>
        <th>Nacionalidade</th>
        <th>Ano de Nascimento</th>
        <th class="actions">Ações</th>
    </tr>
    </thead>
    <tbody>
    <c:forEach items="${autores}" var="autor">
        <tr>
            <td>${autor.id_aut}</td>
            <td>${autor.nome_aut}</td>
            <td>${autor.nacionalidade_aut}</td>
            <td>${autor.data_nascimento_aut}</td>
            <td class="actions">
                <form action="${pageContext.request.contextPath}/autores/editar/${autor.id_aut}" method="get" style="display:inline;">
                    <button type="submit" class="btn btn-warning">Editar</button> </form>

                <form action="${pageContext.request.contextPath}/autores/excluir/${autor.id_aut}" method="post" style="display:inline;">
                    <button type="submit" class="btn btn-danger" onclick="return confirm('Tem certeza?')">Excluir</button> </form>
            </td>
        </tr>
    </c:forEach>
    </tbody>
</table>
<c:if test="${not empty mensagem}">
    <c:choose>
        <c:when test="${mensagem.startsWith('Erro')}">
            <p class="msg-feedback msg-erro">${mensagem}</p>
        </c:when>
        <c:otherwise>
            <p class="msg-feedback msg-sucesso">${mensagem}</p> </c:otherwise>
    </c:choose>
</c:if>

<div style="margin-top: 20px;">
    <a href="${pageContext.request.contextPath}/home">Voltar para Home</a>
</div>
</body>
</html>echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\webapp\WEB-INF\emprestimo\editar.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<head>
    <title>Novo Empréstimo</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/style.css">
</head>
<body>
<h1>Novo Empréstimo</h1>

<form action="${pageContext.request.contextPath}/emprestimos/salvar" method="post">
    <div>
        <label>Livro:</label>
        <select name="id_livro_emp" required>
            <option value="">Selecione um livro</option>
            <c:forEach items="${livros}" var="livro">
                <option value="${livro.id_liv}">${livro.titulo_liv} (${livro.isbn_liv})</option>
            </c:forEach>
        </select>
    </div>

    <div>
        <label>Usuário:</label>
        <select name="id_usuario_emp" required>
            <option value="">Selecione um usuário</option>
            <c:forEach items="${usuarios}" var="usuario">
                <option value="${usuario.id_us}">${usuario.nome_us} (${usuario.email_us})</option>
            </c:forEach>
        </select>
    </div>

    <button type="submit" class="btn btn-save">Registrar Empréstimo</button>
    <a href="${pageContext.request.contextPath}/emprestimos" class="btn btn-cancel">Cancelar</a>
</form>
</body>
</html>echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\webapp\WEB-INF\emprestimo\listar.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<head>
    <title>Empréstimos</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/style.css">
</head>
<body>

<h1>Empréstimos</h1>

<a href="${pageContext.request.contextPath}/emprestimos/novo" class="btn btn-novo">Novo Empréstimo</a>

<table>
    <tr>
        <th>ID</th>
        <th>Livro</th>
        <th>Usuário</th>
        <th>Data Empréstimo</th>
        <th>Data Devolução Prevista</th>
        <th>Status</th>
        <th>Ações</th>
    </tr>
    <c:forEach items="${emprestimos}" var="emp">
        <tr>
            <td>${emp.id_emp}</td>
            <td>${emp.titulo_livro}</td>
            <td>${emp.nome_usuario}</td>
            <td>${emp.data_emprestimo_emp}</td>
            <td>${emp.data_devolucao_prevista_emp}</td>
            <td>${emp.status_emp}</td>
            <td>
                <c:if test="${emp.status_emp eq 'ATIVO'}">
                    <form action="${pageContext.request.contextPath}/emprestimos/devolver/${emp.id_emp}" method="post" style="display:inline;">
                        <button type="submit" class="btn btn-success" onclick="return confirm('Confirmar devolução?')">Devolver</button> </form>
                </c:if>
            </td>
        </tr>
    </c:forEach>
</table>
<c:if test="${not empty mensagem}">
    <c:choose>
        <c:when test="${mensagem.startsWith('Erro')}">
            <p class="msg-feedback msg-erro">${mensagem}</p>
        </c:when>
        <c:otherwise>
            <p class="msg-feedback msg-sucesso">${mensagem}</p> </c:otherwise>
    </c:choose>
</c:if>

<a href="${pageContext.request.contextPath}/home" class="back-link">Voltar</a> <%-- se for usuario, volta para a pagina de login (nao tem acesso a home) --%>
</body>
</html>echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\webapp\WEB-INF\livro\editar.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<head>
    <title>${empty livro.id_liv ? 'Novo Livro' : 'Editar Livro'}</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/style.css">
</head>
<body>
<h1>${empty livro.id_liv ? 'Novo Livro' : 'Editar Livro'}</h1>

<form action="${pageContext.request.contextPath}/livros/salvar" method="post">
    <input type="hidden" name="id_liv" value="${livro.id_liv}">
    <input type="hidden" name="disponivel_liv" value="${livro.disponivel_liv}">

    <div>
        <label>Título:</label>
        <input type="text" name="titulo_liv" value="${livro.titulo_liv}" required>
    </div>

    <div>
        <label>ISBN:</label>
        <input type="text" name="isbn_liv" value="${livro.isbn_liv}" required>
    </div>

    <div>
        <label>Ano Publicação:</label>
        <input type="number" name="ano_publicacao_liv" value="${livro.ano_publicacao_liv}" required>
    </div>

    <div>
        <label>Autor:</label>
        <select name="id_autor_liv" required>
            <option value="">Selecione um autor</option>
            <c:forEach items="${autores}" var="autor">
                <option value="${autor.id_aut}"
                    ${livro.id_autor_liv eq autor.id_aut ? 'selected' : ''}>
                        ${autor.nome_aut}
                </option>
            </c:forEach>
        </select>
    </div>

    <button type="submit" class="btn btn-save">Salvar</button>
    <a href="${pageContext.request.contextPath}/livros" class="btn btn-cancel">Cancelar</a>
</form>
</body>
</html>echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\main\webapp\WEB-INF\livro\listar.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<head>
    <title>Livros</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/style.css">
</head>
<body>
<h1>Livros</h1>

<a href="${pageContext.request.contextPath}/livros/novo" class="btn btn-novo">Novo Livro</a>

<table>
    <tr>
        <th>ID</th>
        <th>Título</th>
        <th>ISBN</th>
        <th>Ano Publicação</th>
        <th>Autor</th>
        <th>Disponível</th>
        <th>Ações</th>
    </tr>
    <c:forEach items="${livros}" var="livro">
        <tr>
            <td>${livro.id_liv}</td>
            <td>${livro.titulo_liv}</td>
            <td>${livro.isbn_liv}</td>
            <td>${livro.ano_publicacao_liv}</td>
            <td>${livro.nome_autor}</td>
            <td>${livro.disponivel_liv ? "Sim" : "Não"}</td>
            <td class="action-links">
                <form action="${pageContext.request.contextPath}/livros/editar/${livro.id_liv}" method="get" style="display:inline;">
                    <button type="submit" class="btn btn-warning">Editar</button> </form>

                <form action="${pageContext.request.contextPath}/livros/excluir/${livro.id_liv}" method="post" style="display:inline;">
                    <button type="submit" class="btn btn-danger" onclick="return confirm('Tem certeza?')">Excluir</button> </form>
            </td>
        </tr>
    </c:forEach>
    <c:if test="${not empty mensagem}">
        <c:choose>
            <c:when test="${mensagem.startsWith('Erro')}">
                <p class="msg-feedback msg-erro">${mensagem}</p>
            </c:when>
            <c:otherwise>
                <p class="msg-feedback msg-sucesso">${mensagem}</p>
            </c:otherwise>
        </c:choose>
    </c:if>
</table>
<a href="${pageContext.request.contextPath}/home" class="back-link">Voltar</a>
</body>
</html>echo .

- Endereço: C:\Users\Cliente\nicolegg13\biblio-spring\src\test\java\br\ufsm\csi\aulaspringmvc\AulaSpringMvcApplicationTests.java:
package br.ufsm.csi.aulaspringmvc;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class AulaSpringMvcApplicationTests {

	@Test
	void contextLoads() {
	}

}
echo .

